import requests

__all__ =[
    'get_fits'
]


def get_fits(
        query_text: str,
        raster_only: bool = False,
        sji_only: bool = False,
):


    """ Routine to get IRIS Level 2 fits data from the
    Heliophysics Coverage Registry (HCR) record(s) obtained
    from the query made at the IRIS L2 data search tool at
    https://iris.lmsal.com/search/

    Parameters
    ----------

    query_text: an string cotaineng the query text generated by the
        IRIS L2 data search tool at https://iris.lmsal.com/search/

    raster_only: `bool`
        If True, the code will only download/return the found compressed
        raster filenames. Default=False

    sji_only: `bool`
        If True, the code will only download/return the found compressed
        SJI filenames. Default=False

    decompress: `bool`
        If True, the code will try to decompress the donwloaded/
        returned files. Defaul=True

    text_files: `bool`
        If True, the code will create the shell-script files iris_wget_query.sh
        and, if decompress=True, iris_decompress_query.sh to be executed
        manually by the user. Default=False

    output_dir: `string`
        If set, the found compressed data will be downloaded and eventually
        decompressed in the providen directory. Default = None

    Returns
    -------

    list_urls: `list`
        A list containing the HTTP address to the each ot the files founds by
        the code in the response provided by the IRIS L2 data search tool.

    Notes
    -----
        The last version of this code can be found at:
        https://gitlab.com/LMSAL_HUB/iris_hub/iris_lmsalpy
        Comments can be sent to <asainz.solarphysics@gmail.com>

    """
    hcr = None
    while hcr is None:
        try:
            hcr = requests.get(query_text, timeout=5)
        except requests.exceptions.RequestException:
            pass


    hcr = hcr.json()
    hcr = hcr['Events']
    list_urls = list()
    for i in hcr:
        for j in i['groups']:
            url_file = j['comp_data_url']
            if raster_only != False and sji_only == False:
                if url_file.find('raster') != -1: list_urls.append(url_file)
            if raster_only == False and sji_only != False:
                if url_file.find('SJI') != -1: list_urls.append(url_file)
            if (raster_only == False and sji_only == False) or (raster_only != False and sji_only != False):
                list_urls.append(url_file)

    return list_urls
